<?php

/*******************************
 * DRUPAL HOOKS
 */

/**
 * Implements hook_init()
 */
function teligence_surveys_init()
{
	switch ($_GET['q']) 
	{
		case 'surveys/secure/facebook-jan':
		case 'surveys/normal/facebook-jan':
		case 'surveys/secure/facebook-feb':
		case 'surveys/normal/facebook-feb':
			// check if we are inside facebook iframe
			if(isset($_REQUEST['signed_request']))
			{
				$ids = array(
					'facebook-jan' => 'teligence_surveys_facebookJanuaryMiniContest_form',
					'facebook-feb' => 'teligence_surveys_facebookFebruaryContest_form',
				);
				
				global $facebook;
				module_load_include('php', 'teligence_surveys', 'facebook');
				$facebook = new Facebook(
					array(
						'appId' => variable_get($ids[arg(2)].'_appId',''),
						'secret' => variable_get($ids[arg(2)].'_appSecret',''),
						'cookie' => true,
					)
				);

				// debug and logging
				// $user_status = $facebook->getUser();
				// watchdog('teligence_surveys','$user_status: <pre>'.check_plain(print_r($user_status,1)).'</pre>');	
				// $signed_request = $facebook->getSignedRequest();
				// watchdog('teligence_surveys','$signed_request: <pre>'.check_plain(print_r($signed_request,1)).'</pre>');	
				// $user_profile = $facebook->api('/me','GET');
				// watchdog('teligence_surveys','$signed_request: <pre>'.check_plain(print_r($user_profile,1)).'</pre>');	
			}
			break;
		
		default:
			
			break;
	}
}
 
/**
 * Implements hook_perm()
 */
function teligence_surveys_perm()
{
	return array(
		'access surveys settings',
		'theme surveys templates',
		'download surveys results',
	);
}
 
/**
 * Implements hook_menu()
 */
function teligence_surveys_menu()
{
	$items = array();
	
	/**
	 * ADMIN
	 */
	$items['admin/surveys'] = array (
	    'title'=>'Teligence Surveys',
	    'page callback'=>'drupal_get_form',
	    'page arguments'=> array ('teligence_surveys_settings_form'),
	    'access arguments'=> array ('access surveys settings'),
	    'file' => 'teligence_surveys-settings.inc',
    );
    $items['admin/surveys/settings'] = array (
	    'title'=>'Settings',
	    'type'=>MENU_DEFAULT_LOCAL_TASK,
    	'weight'=> -10,
    );
	
	/**
	 * PAGES
	 */
	$items['surveys/%/facebook-jan'] = array(
		'title' => 'facebook jan',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('teligence_surveys_facebookJanuaryMiniContest_form'),
		'file' => 'teligence_surveys-pages.inc',
		'access callback'=> TRUE, 
	);
	$items['surveys/%/facebook-feb'] = array(
		'title' => 'facebook feb',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('teligence_surveys_facebookFebruaryContest_form'),
		'file' => 'teligence_surveys-pages.inc',
		'access callback'=> TRUE,
	);
	
	/**
	 * CALLBACKS
	 */
	$items['surveys/export-csv/%'] = array(
		'page callback' => 'teligence_surveys_exportCSV',
		'page arguments' => array(2),
		'access arguments'=> array('download surveys results'),
		'type' => MENU_CALLBACK,
	);
	$items['surveys/redirect/%'] = array(
		'page callback' => 'teligence_surveys_redirect',
		'page arguments' => array(2),
		'access callback'=> true,
		'type' => MENU_CALLBACK,
	);
	
	
	return $items;
}


/**
 * Implements hook_theme()
 */
function teligence_surveys_theme($existing, $type, $theme, $path)
{
	return array(
		'teligence_surveys_facebookJanuaryMiniContest_form' => array(
			'arguments' => array('form' => null),
			'template' => 'teligence_surveys-facebookJanuaryMiniContest-form',
			'path' => drupal_get_path('module','teligence_surveys') .'/templates',
		),
		'teligence_surveys_facebookFebruaryContest_form' => array(
			'arguments' => array('form' => null),
			'template' => 'teligence_surveys-facebookFebruaryContest-form',
			'path' => drupal_get_path('module','teligence_surveys') .'/templates',
		),
	);
}

/**
 * Implements MYMODULE_preprocess()
 */
function teligence_surveys_preprocess_page(&$vars)
{
	$pages = array(
		'surveys/secure/facebook-jan',
		'surveys/normal/facebook-jan',
		'surveys/secure/facebook-feb',
		'surveys/normal/facebook-feb',
	);
	if(in_array($_GET['q'],$pages))
	{
		// Unset stylesheets.
		$css = $vars['css'];
		unset($css['all']['module']['modules/system/defaults.css']);
		unset($css['all']['module']['modules/system/system.css']);
		unset($css['all']['theme']['sites/all/themes/new_livelinks/css/header_style.css']);
		unset($css['all']['theme']['sites/all/themes/new_livelinks/css/default.css']);
		unset($css['all']['theme']['sites/all/themes/new_livelinks/css/layout.css']);
		unset($css['all']['theme']['sites/all/themes/new_livelinks/css/style.css']);
		unset($css['all']['theme']['sites/all/themes/new_livelinks/css/spanish_style.css']);
		unset($css['all']['theme']['sites/all/themes/new_livelinks/css/print.css']);
		$vars['styles'] = drupal_get_css($css);
		
		// set only specific page vars
		$vars = array(
			'head' => $vars['head'],
			'styles' => $vars['styles'],
			'scripts' => $vars['scripts'],
			'messages' => $vars['messages'],
			'content' => $vars['content'],
		);
	}
}
/**
 * Implements MYMODULE_preprocess()
 */
function teligence_surveys_preprocess(&$vars,$hook)
{
	switch ($hook) 
	{
		case 'teligence_surveys_facebookJanuaryMiniContest_form':
		case 'teligence_surveys_facebookFebruaryContest_form':
			// facebook sidebars url 
			$app_id = variable_get($hook.'_appId','');
			$pageURL = variable_get($hook.'_pageURL','');
			$sidebarsPage = "$pageURL?sk=app_$app_id";
			
			// facebook auth url
			$auth_url  = "https://www.facebook.com/dialog/oauth/?";
			$auth_url .= "client_id=$app_id";
			$auth_url .= "&redirect_uri=" . url('surveys/redirect/'.$hook,array('absolute'=>TRUE));

			// check if we are inside facebook iframe
			$app_id = variable_get($hook.'_appId','');
			$canvas_page = variable_get($hook.'_canvasPageUrl',''); //"YOUR_CANVAS_PAGE_URL";
			if(isset($_REQUEST['signed_request']))
			{	
				global $facebook;
				$signed_request = $facebook->getSignedRequest();
				
				
				// check for user_id; if not found then display warning
				if ($vars['form']['pageLiked']['#default_value'] && empty($signed_request['user_id']))
				{
					$vars['noFacebookId'] = TRUE;
					$vars['allowPermissionsURL'] = $auth_url;
				}
				
				// check if we are not in page with side bars
				if(empty($signed_request['page']['id']))
				{
					// redirect to facebook app page with sidebars
					$vars['scripts'] .= "<script> top.location.href='$sidebarsPage' </script>"; 
				}
				
				// check if they liked us
				if($vars['form']['pageLiked']['#default_value'] && variable_get($hook.'_status',1))
				{
					// find out if they already submited the form
					db_set_active('surveys');
					$sql = "SELECT formValues FROM {teligence_surveys} 
							WHERE formId = '%s' 
							AND formValues LIKE '%%%s%'";
					$formValues = db_result(db_query($sql,$hook,$vars['form']['facebookId']['#default_value']));
					db_set_active();
					(strlen($formValues) ? $formValuesArray = unserialize($formValues):$formValuesArray['facebookId']=NULL);

					// debug and logging
					// watchdog('teligence_surveys','$formValuesArray: <pre>'.check_plain(print_r($formValuesArray,1)).'</pre>');		
					
					// evaluate and display sections of template accordingly
					if($vars['form']['submittedSuccess']['#default_value'])
					{
						// they just submitted the form
						$vars['formStepTwo'] = TRUE;
					}
					elseif($formValuesArray['facebookId'] == $vars['form']['facebookId']['#default_value'])
					{
						// they already entered the contest
						$vars['alreadyEntered'] = TRUE;
					}
					elseif(!$vars['noFacebookId']) 
					{
						// they can enter the contest
						$vars['formStepOne'] = TRUE;
					}	
				}
				elseif(!variable_get($hook.'_status',1))
				{
					// the contest is over
					$vars['contestOver'] = TRUE;
				}
				else
				{
					// show arrow pointing to LIKE button
					$vars['likeUsToEnter'] = TRUE;
				}
				
				// logic for admins using facebook as page
				if(	isset($signed_request['page']['admin']) 
					&& empty($signed_request['user_id']) 
					&& variable_get($hook.'_status',1))
				{
					$vars['scripts'] = '';
					$vars['likeUsToEnter'] = FALSE;
					$vars['noFacebookId'] = TRUE;
					$vars['allowPermissionsURL'] = $auth_url;
				}
			}
			else
			{
				if(user_access('theme surveys templates'))
				{
					// enable template sections
					$vars['likeUsToEnter'] = TRUE;
					$vars['alreadyEntered'] = TRUE;
					$vars['formStepOne'] = TRUE;
					$vars['formStepTwo'] = TRUE;
					$vars['contestOver'] = TRUE;
					$vars['noFacebookId'] = TRUE;
					$vars['allowPermissionsURL'] = $auth_url;
				}
				else 
				{
					// redirect to facebook app page with sidebars
					drupal_goto($sidebarsPage);
				}
			}
			break;
		
		default:
			
			break;
	}
}

/**
 * Implements hook_form_alter(&$form, &$form_state, $form_id)
 */
function teligence_surveys_form_alter(&$form, &$form_state, $form_id)
{
	$ids = array(
		'teligence_surveys_facebookJanuaryMiniContest_form',
		'teligence_surveys_facebookFebruaryContest_form',
	);
	if(in_array($form_id, $ids))
	{
		if(user_access('theme surveys templates'))
		{
			unset($form['signed_request']);
		}
		
		if(isset($_REQUEST['signed_request']))
		{
			// instantiate facebook sdk object
			global $facebook;
			$signed_request = $facebook->getSignedRequest();
			
			// pre populate the form
			$form['signed_request']['#default_value'] = $_REQUEST['signed_request'];
			$form['pageLiked']['#default_value'] = $signed_request['page']['liked'];
			
			// find if user is logged in
			if($signed_request['user_id'])
			{
				try
				{
					$user_profile = $facebook->api('/me','GET');
					$form['facebookId']['#default_value'] = $signed_request['user_id'];
				
					if($form['firstname'])
						$form['firstname']['#default_value'] = $user_profile['first_name'];
					
					if($form['lastname'])
						$form['lastname']['#default_value'] = $user_profile['last_name'];
					
					// debug and logging
					// watchdog('teligence_surveys','$user_profile:<pre>'.check_plain(print_r($user_profile,1)).'</pre>');
				}
				catch(FacebookApiException $e)
				{
					// do nothing
				}
			}
		}
		
	}
}

/********************************
 * MENU CALLBACKS
 */
function teligence_surveys_redirect($hook)
{
	$canvasPageUrl = variable_get($hook.'_canvasPageUrl', '' );
	drupal_goto($canvasPageUrl);
}
 
/********************************
 * VALIDATORS
 */

/**
 * look for duplicates in specific field and form
 */
function teligence_surveys_duplicateValue($element,&$form_state)
{
	// find duplicates
	db_set_active('surveys');
	$sql = "SELECT COUNT(*) FROM {teligence_surveys} 
			WHERE formValues LIKE '%%%s%' 
			AND formId = '%s'";
	$dbresult = db_result(db_query($sql,$element['#value'],$form_state['values']['form_id']));
	db_set_active();
	if($dbresult)
		form_error($element, $element['#title'] . ' has been already submitted.');
	
	// debug and logging
	// watchdog('teligence_surveys','teligence_surveys_duplicateValue:<pre>'.check_plain(print_r($element,1)).'</pre>');
}

/**  
 * Verifies that $phonenumber is a valid ten-digit North American phone number
 *
 * @param string $phonenumber
 * @return boolean Returns boolean FALSE if the phone number is not valid. 
 */
function teligence_surveys_validPhoneNumber($phonenumber) 
{
  $phonenumber = trim($phonenumber);
   
  if(empty($phonenumber))
  {
	return FALSE;
  }
  // define regular expression
  $regex = "/
    \D*           # ignore non-digits
    1?            # an optional 1
    \D*           # optional separator 
    [02-9]\d{2}   # area code (can't start with 1)
    \D*           # optional separator
    [02-9]\d{2}   # 3-digit prefix (can't start with 1)    
    \D*           # optional separator
    \d{4}         # 4-digit line number
    \D*           # optional separator
    \d*           # optional extension
    \D*           # ignore trailing non-digits
    /x";
  // return true if valid, false otherwise
  return (bool) preg_match($regex, $phonenumber); 
}
 
  
/********************************
 * PRE RENDERS
 */

/**
 * phone number
 */
function teligence_purchase_prerenderPhone($element)
{
	drupal_add_js(drupal_get_path('module','teligence_purchase') . '/js/jquery.maskedinput-1.3.min.js');
	$script = '	
		$(document).ready(function(){
			$("#'.$element['#id'].'").mask("(999) 999-9999");
		});
	';
	drupal_add_js($script, 'inline');
	// $element['#description'] = t('Enter phone in the form of (xxx) xxx-xxxx');
	
	return $element;
}

/**
 * disable button
 */
function teligence_surveys_buttonDisable($element)
{
	$script = '	
	var touched;
	var t;
	function disabler(buttonId){
		document.getElementById(buttonId).disabled=true;
		document.getElementById(buttonId).value="'.t('Processing...').'";
	    clearTimeout(t);
	};
	';
	drupal_add_js($script, 'inline');
	$element['#attributes'] = array(
		'onclick' => 'javascript:setTimeout("disabler(\'' . $element['#id'] .'\')", 1);',
	);
	
	return $element;
}

/************************************
 * MISCELLANEUS FUNCTIONS
 */

/**
 * Verifying and Decoding
 * Verifying the signature and decoding the data in a signed_request is quite straightforward. The following PHP provides an example:
 * http://developers.facebook.com/docs/authentication/signed_request/
 * You call this function with $_REQUEST['signed_request'] and your app secret. 
 * Our PHP SDK will parse and verify the signed_request parameter for you. 
 * You can pass it to /tools/echo to quickly see a decoding.
 */
function teligence_surveys_parseSignedRequest($signed_request, $secret) 
{
  list($encoded_sig, $payload) = explode('.', $signed_request, 2); 

  // decode the data
  $sig = teligence_surveys_base64_url_decode($encoded_sig);
  $data = json_decode(teligence_surveys_base64_url_decode($payload), true);

  if (strtoupper($data['algorithm']) !== 'HMAC-SHA256') {
    error_log('Unknown algorithm. Expected HMAC-SHA256');
    return null;
  }

  // check sig
  $expected_sig = hash_hmac('sha256', $payload, $secret, $raw = true);
  if ($sig !== $expected_sig) {
    error_log('Bad Signed JSON signature!');
    return null;
  }

  return $data;
}
function teligence_surveys_base64_url_decode($input) 
{
  return base64_decode(strtr($input, '-_', '+/'));
} 
 
 /**
 * find sections of phone number
 * return array with three values accordingly
 */
function teligence_surveys_npanxx($phonenumber) 
{   	
	$phonenumber = trim($phonenumber);
	
	// define regular expression   
  	$regex = "/
    ^\D*          # ignore non-digits
    1?            # an optional 1
    \D*           # optional separator 
    ([02-9]\d{2}) # capture area code       
    \D*           # optional separator
    (\d{3})       # capture 3-digit prefix
    \D*           # optional separator
    (\d{4})       # capture 4-digit line number                       
    \D*           # optional separator
    (\d*)         # capture optional extension                       
    \D*$          # ignore trailing non-digits
  	/x"; 
    
  	// get digits of phone number
  	preg_match($regex, $phonenumber, $matches);

    return array(
    	$matches[1], // npa
    	$matches[2], // nxx
    	$matches[3] // number
    );
} 


/**
 * Export CSV
 */
function teligence_surveys_exportCSV($formId = 'all')
{
	header("Content-type: application/csv");
	header("Content-Disposition: attachment; filename=$formId.csv");
	header("Pragma: no-cache");
	header("Expires: 0");
	
	// find duplicates
	db_set_active('surveys');
	$sql = "SELECT * FROM {teligence_surveys}";
	if($formId <> 'all')
		$sql .= " WHERE formId = '%s' ";
	$dbresult = db_query($sql,$formId);
	db_set_active();
	
	$header  = '';
	$rows = '';
	while($row = db_fetch_array($dbresult))
	{
		$formValues = unserialize($row['formValues']);
		
		foreach((array)$formValues as $k=>$v)
		{
			$formValues[$k]=str_replace(",", ";", $v);
		}
		
		if(empty($header))
		{
			$header  = '';
			$header .= 'formId,';
			$header .= implode(',',array_keys($formValues)).',';
			$header .= 'formSubmissionTimeStamp';
			$header .= "\n";
		}
		
		$rows .= $row['formId'].',';
		$rows .= implode(',',array_values($formValues)).',';
		$rows .= $row['formSubmissionTimeStamp'];
		$rows .= "\n";
	}
	
	print "$header$rows";
	exit;
}
