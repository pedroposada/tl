<?php

//include_once(drupal_get_path('module', 'teligence_cart') . '/inc/soap.inc');

/***************************
 * **** DRUPAL HOOKS ***** *
 ***************************/

/*
 * Implementation of hook_perm()
 */
function teligence_cart_paypal_perm()
{
	return array(
		'access paypal payment button'
	);
}

/*
 * Implementation of hook_form_alter()
 */
function teligence_cart_paypal_form_alter(&$form, &$form_state, $form_id)
{
	if(user_access('access paypal payment button'))
	{
		/*
		 * Auto sign up
		 */
		if($form_id == "teligence_cart_select_package_form" && $form_state['storage']['step'] == 1)
		{
			(strlen($_REQUEST['member']) ? $form['membership']['membership_status']['#default_value'] = $_REQUEST['member'] : null);
		}
		if($form_id == "teligence_cart_select_package_form" && $form_state['storage']['step'] == 2)
		{
			//(is_numeric($_REQUEST['areaCode']) || is_null($form_state['storage']['values'][2]['area_code']) ? $form['group']['area_code']['#value'] = $_REQUEST['areaCode'] : null);
			//(is_numeric($_REQUEST['Ani']) || is_null($form_state['storage']['values'][2]['phone_number']) ? $form['group']['phone_number']['#value'] = substr($_REQUEST['Ani'],3) : null);
		}
		if($form_id == "teligence_cart_select_package_form" && $form_state['storage']['step'] == 3)
		{	
			if($form['packages']['#type'] == 'radios')
			{
				$form['web_account']['paypal'] = array(
					'#type' => 'submit',
					'#value' => t('Pay by PAYPAL >>'),
					'#submit' => array('teligence_cart_paypal_submit'),
					//'#validate' => array('teligence_cart_paypal_validate'),
					//'#weight' => 101,
					//'#attributes' => array("style" => "float: right"),
				);
				$form['next']['#value'] = t('Pay by Credit Card >>');
			}
			
			(is_numeric($_REQUEST['PackageId']) && is_null($form_state['storage']['values'][3]['packages']) ? $form['packages']['#default_value'] = $_REQUEST['PackageId'] : null);		
		}
		
		
		/*
		 * Speedy renewal
		 */
		if($form_id == "teligence_cart_add_time_form" && $form_state['storage']['step'] == 1)
		{
			if($form['packages_group']['packages']['#type'] == 'radios')
			{
				$form['paypal'] = array(
					'#type' => 'submit',
					'#value' => t('Pay by PAYPAL >>'),
					'#submit' => array('teligence_cart_paypal_sr_submit'),
					'#validate' => array('teligence_cart_paypal_sr_validate'),
					'#weight' => 9999999,
					//'#attributes' => array("style" => "float: right; margin-right: 10px;"),
				);
				if(isset($form['next']))
				{
					$form['next']['#value'] = t('Pay by Credit Card >>');
				}
			}
		}
	}
}


/*
 * Implementation of hook_menu()
 */
function teligence_cart_paypal_menu()
{
	$items['admin/cart/paypal'] = array(
		'title' => 'Paypal Settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('teligence_cart_paypal_settings'),
		'access arguments' => array('administer cart settings'),
		'type'=> MENU_LOCAL_TASK,
		'weight' => 999,
	);
	$items['cart/paypal/asu/success'] = array(
		'title' => 'Successful PAYPAL Purchase - Auto Sign Up',
		'page callback' => 'teligence_cart_paypal_asu_success_page',
		'access callback' => true,
	);
	$items['cart/paypal/sr/success'] = array(
		'title' => 'Successful PAYPAL Purchase - Speedy Renewal',
		'page callback' => 'teligence_cart_paypal_sr_success_page',
		'access arguments' => array('access logged in pages'),
	);
	$items['cart/paypal/failure'] = array(
		'title' => 'PAYPAL Failure',
		'page callback' => 'teligence_cart_paypal_failure_page',
		'access callback' => true,
	);
	$items['cart/paypal/price-confirmation'] = array(
		'page callback' => 'teligence_cart_paypal_price_confirmation_screen',
		'access callback' => true,
		'type' => MENU_CALLBACK,
	);
	$items['cart/buy/paypal/%/%/%'] = array(
		'page callback' => 'drupal_get_form',
		'page arguments' => array('teligence_cart_paypal_steps_form',3,4,5),
		'access arguments' => array('access paypal payment button'),
		'type' => MENU_CALLBACK,
	);
	
	return $items;
}

/*
 * Implementation of hook_theme()
 */
function teligence_cart_paypal_theme($existing, $type, $theme, $path)
{
	return array(
		'teligence_cart_paypal_steps' => array(
			'arguments' => array('form' => null),
		)
	);
}


/******************************
 * **** HELPER FUNCTIONS **** *
 ******************************/

/*
 * settings form
 */
function teligence_cart_paypal_settings($form_state)
{
	$form['#pre_render'] = array('teligence_cart_paypal_settings_pre_render');
	
	$form['teligence_cart_paypal_vendor_id_asu'] = array(
		'#type' => 'textfield',
		'#title' => t('Paypal Payment Gateway Vendor ID for Auto Sign Up'),
		'#description' => t('Enter here the alpha numeric ID for Auto Sign Up. This ID has to match with the one stored in the payment web-site database as well.'),
		'#default_value' => variable_get('teligence_cart_paypal_vendor_id_asu', 'LLK1ASU'),
	);
	$form['teligence_cart_paypal_vendor_pass_asu'] = array(
		'#type' => 'textfield',
		'#title' => t('Paypal Payment Gateway Vendor Password for Auto Sign Up'),
		'#description' => t('Password for payment web-site API.'),
		'#default_value' => variable_get('teligence_cart_paypal_vendor_pass_asu', ''),
	);
	$form['teligence_cart_paypal_vendor_id_sr'] = array(
		'#type' => 'textfield',
		'#title' => t('Paypal Payment Gateway Vendor ID for Speedy Renewal'),
		'#description' => t('Enter here the alpha numeric ID for Speedy Renewal. This ID has to match with the one stored in the payment web-site database as well.'),
		'#default_value' => variable_get('teligence_cart_paypal_vendor_id_sr', 'LLK1ASU'),
	);
	$form['teligence_cart_paypal_vendor_pass_sr'] = array(
		'#type' => 'textfield',
		'#title' => t('Paypal Payment Gateway Vendor Password for Speedy Renewal'),
		'#description' => t('Password for payment web-site API.'),
		'#default_value' => variable_get('teligence_cart_paypal_vendor_pass_sr', ''),
	);
	$form['teligence_cart_paypal_gateway_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Paypal Payment Gateway URL'),
		'#description' => t('Enter here the full URL for the payment web site.'),
		'#default_value' => variable_get('teligence_cart_paypal_gateway_url', 'http://paypal.integration'),
	);
	$form['teligence_cart_paypal_asu_success_url'] = array(
		'#type' => 'item',
		'#title' => t('Success URL - ASU'),
		'#description' => t('Vendor success URL. This will be stored in PAYPAL Payment Website configurations for this vendor.'),
		'#value' => urldecode(url('cart/paypal/asu/success', array('absolute'=>true, 'query' => array('SessionID' => "%%")))),
	);
	$form['teligence_cart_paypal_price_confirmation_screen'] = array(
		'#type' => 'textarea',
		'#rows' => 20,
		'#title' => t('Price Confirmation Screen'),
		'#description' => t('URL: <strong>'. url('cart/paypal/price-confirmation', array('absolute' => true)) .'</strong> . Enter here the message the user will see when confirming the price prior to jumping to PAYPAL. you can use HTML or simple text format. Use following tokens: <pre>' . print_r(teligence_cart_paypal_tokens(), true) . '</pre>'),
		'#default_value' => variable_get('teligence_cart_paypal_price_confirmation_screen', ''),
	);
	$form['teligence_cart_paypal_failure_screen'] = array(
		'#type' => 'textarea',
		'#rows' => 20,
		'#title' => t('Failure Screen'),
		'#description' => t('URL: <strong>'. url('cart/paypal/failure', array('absolute' => true)) .'</strong> . Tokens: <pre>' . print_r(array('[customer-service-number]'), true) . '</pre>' ),
		'#default_value' => variable_get('teligence_cart_paypal_failure_screen', ''),
	);

	return system_settings_form($form);
}

/*
 * prerender settings form
 */
function teligence_cart_paypal_settings_pre_render($form)
{
	foreach((array)element_children($form) as $key)
	{
		$form[$key]['#description'] .= "Variable Name: <strong>variable_get('" . $key . "', '' )</strong>";
	}
	
	return $form;
}

/*
 * tokens for price confirmation screen
 */
function teligence_cart_paypal_tokens()
{
	return array(
		'PackageAmountDollars',
		'TotalAmountDollars',
		'PackageName',
		'TaxesAmountDollars',
		'PackageMinutes',
		'Currency',
		'Ani',
		'Email',
	);
}

/*
 * validate function for paypal button
 */
function teligence_cart_paypal_validate($form, &$form_state)
{
	// validate 
	if (!teligence_cart_check_email($form_state['values']['email']))
    {
        form_set_error('email', t('Invalid email address'));
    }
    if ($form_state['values']['password'] <> $form_state['values']['confirm_password'])
    {
        form_set_error('confirm_password', variable_get('teligence_cart_error_password_match', "Passwords don't match. Please re-enter your password."));
        form_set_error('password', variable_get('teligence_cart_error_password_match', "Passwords don't match. Please re-enter your password."));
        array_pop($_SESSION['messages']['error']);
    }
    if (strlen($form_state['values']['password']) < 6)
    {
        form_set_error('password', t('Password is too short'));
    }
	if (empty($form_state['values']['age']))
	{
		form_set_error('age', t("You must be 18 years of age or older"));
	}
	if(count(form_get_errors()))
	{
		form_set_error('confirm_password', t('Please re-enter your password.'));
	}
}

/*
 * PAYPAL payment steps form
 */
function teligence_cart_paypal_steps_form($form_state, $packageId, $ani, $areaCode)
{
	drupal_add_js(drupal_get_path('module', 'teligence_cart_paypal').'/js/jquery.buttons.js');
	drupal_add_css(drupal_get_path('module', 'teligence_cart').'/styles.css');
	$form_state['storage']['values']['area_code'] = $areaCode;
    $form_state['storage']['values']['packageId'] = $packageId;
    $form_state['storage']['values']['ani'] = $ani;
    $form_state['storage']['values']['step'] = 'paypal';

	$form['#theme'] = 'teligence_cart_paypal_steps';
	$form['#pre_render'] = array('teligence_cart_paypal_steps_per_render');
	$form['page_title'] = array('#type' => 'hidden', '#value' => t('Pay by PAYPAL - Web Account'));
	
	// WEB ACCOUNT INFO
    $form['web_account'] = array (
                '#type'=>'fieldset',
                '#title'=>t('Account Info'),
				'#attributes' => array('class' => 'left-label'),
                '#description' => t('* indicates field is required.'),
    );

    $form['web_account']['email'] = array (
                '#type'=>'textfield',
                '#title'=>t('Email*'),
                '#default_value'=>$form_state['storage']['values'][4]['email'],
    );
    $form['web_account']['password'] = array (
                '#type'=>'password',
                '#title'=>t('Password*'),
                '#default_value'=>$form_state['storage']['values'][4]['password'],
                '#description'=>t('Must be at least 6 characters in length. Max 8 characters.'),
				'#maxlength'=>8,
    			'#size'=>10,
    );
    $form['web_account']['confirm_password'] = array (
                '#type'=>'password',
                '#title'=>t('Confirm Password*'),
                '#default_value'=>$form_state['storage']['values'][4]['confirm_password'],
				'#maxlength'=>8,
    			'#size'=>10,
    );         
    $form['web_account']['contact_perms'] = array (
                '#type'=> 'checkboxes',
                '#options'=>array('email' => 'Contact me via Email', 'sms' => 'Contact me via SMS'),
                '#default_value'=> $form_state['storage']['values'][4]['contact_perms'] ? $form_state['storage']['values'][4]['contact_perms'] : array(0, 0, 0),
                //'#options' => array('email' => 'Contact me via Email'),
                '#theme' => 'teligence_cart_selection_boxes',
    );
    
    $form['web_account']['age'] = array(
            '#type' => 'checkbox',
            '#title' => t('I am 18 years old or older'),
     );
	
    $form['web_account']['paypal'] = array(
			'#type' => 'submit',
			'#value' => t('Pay by PAYPAL >>'),
			'#submit' => array('teligence_cart_paypal_submit'),
			'#validate' => array('teligence_cart_paypal_validate'),
			'#weight' => 99,
			'#attributes' => array("style" => "float: right"),
	);
    
	$form['previous'] = array (
        '#type'=>'submit',
        '#value'=>t('<< Go back'),
		'#weight' => 101,
		'#submit' => array('teligence_cart_paypal_submit'),
		//'#submit' => array('teligence_cart_paypal_submit'),
		//'#attributes' => array("onclick" => "history.go(-1)"),
    );

	return $form;
}

/*
 * buy now pre render teligence_cart_autosignup_per_render
 */
function teligence_cart_paypal_steps_per_render($form)
{
	drupal_add_js(drupal_get_path('module', 'teligence_cart').'/js/jquery.password.js');
	drupal_set_title($form['page_title']['#value']);
	
	if(array_key_exists('age', (array)form_get_errors()))
	{
		$form['web_account']['age']['#attributes'] = array("class" => "error");
	}

	return $form;
}

/*
 * submit handler to go to PAYPAL - ASU
 */
function teligence_cart_paypal_submit($form, &$form_state)
{
	//save the values for the current step into the storage array
    $form_state['storage']['values'][$form_state['storage']['step']] = $form_state['values'];
    
    if($form_state['clicked_button']['#id'] == 'edit-previous')
    {
    	$query = array(
					'area_code' => $form_state['storage']['values']['area_code'],
					'phone_number' => substr($form_state['storage']['values']['ani'], 3),
					'PackageId' => $form_state['storage']['values']['packageId'],
					'step' => 3,
					'member' => 'new_member',
		);
    
    	drupal_goto('cart/buy', $query);
    }
    
	//drupal_set_message('<pre>' . print_r($form_state['storage']['values']['step'], true) . '</pre>');	    
    
    if($form_state['storage']['values']['step'] == 'paypal')
    {
    	global $language;
	    /*
		 * Implement the soap call to CheckWebAccount
		 */	
		$params = new stdClass ();
		$params->ivrBrandId = variable_get('teligence_cart_brand', 1); // TODO: enable this parameter in the back-end. Lack of this parameters will result in multibrand emial validation.
		//$params->password = $form_state['values']['password']; // TODO: enable this parameter in the back-end. Lack of this parameters will result in multibrand emial validation.
		$params->email = $form_state['values']['email'];
		$result = teligence_cart_soap_call($params, 'CheckWebAccount', variable_get('wsdl_url_3', ''), true);
		switch($result['result']->CheckWebAccountResult->ResponseCode)
		{
			case 'WebAccountFound':
				drupal_set_message(variable_get('teligence_cart_error_existing_account',''));
			break;
			
			case 'WebAccountNotFound':
				$query = array(
					'SequenceId' => $_SESSION['guid'],
					'Pass' => $form_state['values']['password'],
					'Email' => $form_state['values']['email'],
					'areaCode' => $form_state['storage']['values']['area_code'],
					'Ani' => $form_state['storage']['values']['ani'],
					'PackageId' => $form_state['storage']['values']['packageId'],
					'VendorPass' => md5(variable_get('teligence_cart_paypal_vendor_pass_asu', '')),
					'lang' => $language->language,
				);
				((bool)$form_state['values']['contact_perms']['sms'] ? $query['channelSms'] = 1 : null);
				((bool)$form_state['values']['contact_perms']['email'] ? $query['channelEmail'] = 1 : null);
				
				/*
				 * Implement similar solution as with PAYPAL API,
				 * use cURL to send query parameters, this will authenticate this vendor 
				 * and store parameters in SessionData table
				 * then get SessionID back and direct user to display package details.
				 * At the end, the URL at the payment web-site will look cleaner and more secure
				 */
				$url = url(variable_get('teligence_cart_paypal_gateway_url','') . '/paypal/setsessiondata/' . variable_get('teligence_cart_paypal_vendor_id_asu', ''), array('query' => $query));
				$parsedResponse = teligence_cart_paypal_curl($url);
				if($parsedResponse['Action'] == 'Success' && strlen($parsedResponse['Token']))
				{
					drupal_goto(variable_get('teligence_cart_paypal_gateway_url','') . '/paypal/package-details', array('Token' => $parsedResponse['Token']));
				}
				else
				{
					drupal_set_message('Your request could not be completed.' . variable_get('teligence_cart_error_call_cs',''), 'error');
					
					if(variable_get('teligence_cart_debug_mode', 0))
					{
						drupal_set_message('<pre> Request: ' . print_r($url, true) . '</pre>');
						drupal_set_message('<pre> Response: ' . print_r($parsedResponse, true) . '</pre>');
					}
					
				}
				
				//drupal_set_message(url(variable_get('teligence_cart_paypal_gateway_url','') . '/paypal/package-details', array('query' => $query)));
			break;
			
			default:
				drupal_set_message($result['debug']);
			break;
		}
    }
    else
    {
    	drupal_goto('cart/buy/paypal/' . $form_state['storage']['values'][3]['packages'] . '/' . $form_state['storage']['values'][2]['ani'] . '/' . $form_state['storage']['values'][2]['area_code']);
    }
}

/*
 * submit handler to go to PAYPAL - SR
 */
function teligence_cart_paypal_sr_submit($form, &$form_state)
{
	global $user, $language;
	$query = array(
		'SequenceId' => teligence_cart_uuid(true),
		'PackageId' => $form_state['values']['packages'],
		'EmsMembershipId' => $_SESSION['emsMembershipId'],
		'VendorPass' => md5(variable_get('teligence_cart_paypal_vendor_pass_sr', '')),
		'Email' => $user->mail,
		'VendorPass' => md5(variable_get('teligence_cart_paypal_vendor_pass_sr', '')),
		'lang' => $language->language,
	);
	
	/*
	 * Implement similar solution as with PAYPAL API,
	 * use cURL to send query parameters, this will authenticate this vendor 
	 * and store parameters in SessionData table
	 * then get SessionID back and direct user to display package details.
	 * At the end, the url at the payment web site will look cleaner and more secure
	 */
	$url = url(variable_get('teligence_cart_paypal_gateway_url','') . '/paypal/setsessiondata/' . variable_get('teligence_cart_paypal_vendor_id_sr', ''), array('query' => $query));
	$parsedResponse = teligence_cart_paypal_curl($url);
	if($parsedResponse['Action'] = 'Success' && strlen($parsedResponse['Token']))
	{
		drupal_goto(variable_get('teligence_cart_paypal_gateway_url','') . '/paypal/package-details', array('Token' => $parsedResponse['Token']));
	}
	else
	{
		drupal_set_message('Your request could not be completed.' . variable_get('teligence_cart_error_call_cs',''), 'error');
		if(variable_get('teligence_cart_debug_mode', 0))
		{
			drupal_set_message('<pre>' . print_r($parsedResponse, true) . '</pre>');
			drupal_set_message('<pre>' . print_r($url, true) . '</pre>');
		}
		
	}
	
	//drupal_set_message('<pre>' . print_r($url, true) . '</pre>');
}

/*
 * validate teligence_cart_paypal_sr_validate
 */
function teligence_cart_paypal_sr_validate($form, &$form_state)
{
	if(!is_numeric($form_state['values']['packages']))
	{
		form_set_error('packages', 'Please select a package.');
	}
}

/*
 * success page handler - SR
 */
function teligence_cart_paypal_sr_success_page()
{
	/* 
	 * receive SessionID from PAYPAL payment site and call
	 * http://paypal.integration/paypal/getsessiondata/SessionID
	 * to get all session data which contains Email, Password, IVR Membership, IVR Passcode
	 */
	//get session data from payment site
	if(strlen($_REQUEST['Token']))
	{
		$values = teligence_cart_paypal_curl(variable_get('teligence_cart_paypal_gateway_url','') . '/paypal/getsessiondata/' . urldecode($_REQUEST['Token']));
	}
	else
	{
		return 'Token missing';
	}

	/**
	 * check and set language
	 */
	if(strlen($values['lang']) 
		&& array_key_exists($values['lang'], (array)language_list()) 
		&& !strstr(request_uri(), $values['lang'] . '/'))
	{
		global $language;
		$langs = language_list();
		$language = $langs[$values['lang']];
		// drupal_goto($_GET['q'], array('Token' => $_REQUEST['Token']));
		// exit();
	}
	

	global $user;
	$tokens['tokens']['[minutes-purchased]'] 			= $values['PackageMinutes'];
	$tokens['tokens']['[package-price]'] 				= $values['TotalAmountDollars'];
	$tokens['tokens']['[package-tax]'] 					= $values['TaxesAmountDollars'];
	$tokens['tokens']['[package-total-price]'] 			= $values['TotalAmountDollars'];
	$tokens['tokens']['[promo-minutes]'] 				= 0;
    drupal_mail('teligence_cart', 'time_purchase', $user->mail, language_default(), $tokens);
    drupal_set_message(t("Your transaction was processed successfully. Please check your email for more details."));
	drupal_goto('cart/show-balance');
}



/*
 * success page handler - ASU
 */
function teligence_cart_paypal_asu_success_page()
{
	$output = '';
	/* 
	 * receive SessionID from PAYPAL payment site and call
	 * http://paypal.integration/paypal/getsessiondata/SessionID
	 * to get all session data which contains Email, Password, IVR Membership, IVR Passcode
	 */
	//get session data from payment site
	if(strlen($_REQUEST['Token']))
	{
		$values = teligence_cart_paypal_curl(variable_get('teligence_cart_paypal_gateway_url','') . '/paypal/getsessiondata/' . urldecode($_REQUEST['Token']));
	}
	else
	{
		return 'Token missing';
	}
	
	/**
	 * check and set language
	 */
	if(strlen($values['lang']) 
		&& array_key_exists($values['lang'], (array)language_list()) 
		&& !strstr(request_uri(), $values['lang'] . '/'))
	{
		global $language;
		$langs = language_list();
		$language = $langs[$values['lang']];
		// drupal_goto($_GET['q'], array('Token' => $_REQUEST['Token']));
		// exit();
	}
	
	// prepare tokens
	$tokens['tokens']['[telephone-number]'] 			= $values['Ani'];
	$tokens['tokens']['[first-name]'] 					= $values['FIRSTNAME'];
	$tokens['tokens']['[last-name]'] 					= $values['LASTNAME'];
	$tokens['tokens']['[minutes-purchased]'] 			= $values['PackageMinutes'];
	$tokens['tokens']['[package-price]'] 				= $values['TotalAmountDollars'];
	$tokens['tokens']['[package-tax]'] 					= $values['TaxesAmountDollars'];
	$tokens['tokens']['[package-total-price]'] 			= $values['TotalAmountDollars'];
	$tokens['tokens']['[promo-minutes]'] 				= 0;
	$tokens['tokens']['[ivr-number]'] 					= $values['IvrMembershipNumber'];
	$tokens['tokens']['[ivr-passcode]'] 				= $values['IvrPasscode'];
	$tokens['tokens']['[web-password]'] 				= $values['Pass'];
	$tokens['tokens']['[user-email]'] 					= $values['Email'];
	$tokens['tokens']['[url]'] 							= url('cart/login', array('absolute' => true));


	//SignUp new member and redirect to 7th screen with summary
	$signup_values['values']['ivr_number'] 				= $values['IvrMembershipNumber'];
	$signup_values['values']['ivr_passcode'] 			= $values['IvrPasscode'];
	$signup_values['values']['area_code'] 				= $values['areaCode'];
	$signup_values['values']['email'] 					= $values['Email'];
	$signup_values['values']['password'] 				= $values['Pass'];
	teligence_cart_signup_web_account($signup_values);
	switch($signup_values['ResponseCode'])
	{
		case 'NotFound':
			$tokens = array_merge($tokens['tokens'], teligence_cart_tokens());
			drupal_set_message("You don't have an".$tokens['[brand-name]']."account. Please ". l('sign-up', 'cart/signup') ." for a new account.", 'warning');
		break;
		case 'FoundWithWebAccount':
			drupal_set_message('You have an account with us already. Please ' . l('login', 'cart/login'), 'warning');
		break;
		case 'FoundWithWebAccountEmailNeedsValidation':
			$tokens['tokens']['[url]'] = url('cart/validate/' . $signup_values['ems_validation_code'], array ('absolute'=>true));
	        drupal_mail('teligence_cart', 'validate', $values['Email'], language_default(), $tokens);
	        drupal_set_message('Your new web account has been created. An email has been sent. Please check your inbox and verify your account.');
		break;
		case 'Success':
			$tokens['tokens']['[url]'] = url('cart/validate/'. $signup_values['signup_validation_code'], array ('absolute'=>true));
	        drupal_mail('teligence_cart', 'signup', $values['Email'], language_default(), $tokens);
	        drupal_set_message(variable_get('teligence_cart_error_new_account', 'Your new web account has been created. Further instructions have been sent to your e-mail address.'));
		    
		    // set contact permissions
			$perms['storage']['ani'] 							= $values['Ani'];
			$perms['storage']['email'] 							= $values['Email'];
			$perms['values']['channels']['sms'] 				= (bool)$values['channelSms'];
			$perms['values']['channels']['email'] 				= (bool)$values['channelEmail'];
			teligence_cart_contact_perm_form_submit(array(), $perms);       
			
			// send email with order details
		    drupal_mail('teligence_cart', 'time_purchase', $values['Email'], language_default(), $tokens);
		    
		    $output =  teligence_cart_token_replacer(variable_get('teligence_cart_asu_screen', '' ), $tokens['tokens']);
		break;
		case 'WebAcountAlreadyExists':
			drupal_set_message(variable_get('teligence_cart_error_existing_account', 'You already have an account with us. Did you '. l('forget your password', 'cart/forgot-password') .'?'));
		break;
		case 'TechnicalError':
			drupal_set_message("We are having technical issues. Sorry for the inconvenience. Please don't close this window and try again later.", 'warning');
			drupal_set_message(variable_get('teligence_cart_error_call_cs', 'Please call our customer service: '.variable_get('teligence_cart_customer_service_phone', '1-800-xxx-xxxx')), 'warning');
	        drupal_set_message($result['debug']);
		break;
		default:
		break;
	}
	
	if(variable_get('teligence_cart_debug_mode', 0))
	{
		drupal_set_message('Values from payment site: <pre>' . print_r($values, true) . '</pre>');
		drupal_set_message('Cart sign up web: <pre>' . print_r($signup_values, true) . '</pre>');
	}

	return $output;
}

/*
 * failure page handler
 */
function teligence_cart_paypal_failure_page()
{
	/* 
	 * receive SessionID from PAYPAL payment site and call
	 * http://paypal.integration/paypal/getsessiondata/SessionID
	 * to get all session data which contains Email, Password, IVR Membership, IVR Passcode
	 */
	$values = teligence_cart_paypal_curl(variable_get('teligence_cart_paypal_gateway_url','') . '/paypal/getsessiondata/' . urldecode($_REQUEST['Token']));
	
	/**
	 * check and set language
	 */
	if(strlen($values['lang']) 
		&& array_key_exists($values['lang'], (array)language_list()) 
		&& !strstr(request_uri(), $values['lang'] . '/'))
	{
		global $language;
		$langs = language_list();
		$language = $langs[$values['lang']];
		// drupal_goto($_GET['q'], array('error' => $_REQUEST['error']));
		// exit();
	}
	
	if(variable_get('teligence_cart_debug_mode', 0))
	{
		drupal_set_message(t('!error', array('!error' => urldecode($_REQUEST['error']))), 'error');
	}
	return str_replace('[customer-service-number]', variable_get('teligence_cart_customer_service_phone', '' ), variable_get('teligence_cart_paypal_failure_screen', ''));
}


/**
 * fetch session data values
 * send get request to $API_Endpoint
 * the expected result is in the form of a URL query string
 * like name1=value&name2=value and so on. This function will
 * parse that string into an associative array.
 */
function teligence_cart_paypal_curl($API_Endpoint)
{
	// Set the curl parameters.
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $API_Endpoint);
	curl_setopt($ch, CURLOPT_VERBOSE, 1);

	// Turn off the server and peer verification (TrustManager Concept).
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	
	// Get response from the server.
	$httpResponse = curl_exec($ch);
	
	// empty response, redirect to failure page
	if(!$httpResponse) 
	{
		drupal_set_message("$API_Endpoint is down or not available at the moment. Please try again later.");
		drupal_set_message("We could not connect to paypal payment site.");
		
		// error and alerts logging
		watchdog("teligence_cart_paypal","@errorId - @cause - @resol - @errorMsg", 
		array(
			"@errorId" => "BWTCP001", // Brand Websites teligence cart 001
			"@cause" => "Cause: cURL cannot connect to $API_Endpoint; Connection times out or response is invalid.",
			"@resol" => "Resolution: open network connection on port 80 from webserver to $API_Endpoint", 
			"@errorMsg" => "cURL error message = ".curl_error($ch)." - cURL error code = " .curl_errno($ch),
		), WATCHDOG_ALERT);
	}
	
	// Extract the response details.
	$httpResponseAr = explode("&", $httpResponse);
	$httpParsedResponseAr = array();
	foreach ((array)$httpResponseAr as $pair) 
	{
		list($name, $value) = explode('=', $pair, 2);
		$httpParsedResponseAr[$name] = $value;
	}
	
	return $httpParsedResponseAr;
}


/**
 * page callback handler for paypal price confirmation screen
 * also called package details screen
 */
function teligence_cart_paypal_price_confirmation_screen()
{	
	$output = '';
	if($screen = teligence_cart_paypal_i18n_variable_get('teligence_cart_paypal_price_confirmation_screen', $_REQUEST['lang']))
	{
		$output = $screen;
	}
	else
	{
		$output =  variable_get('teligence_cart_paypal_price_confirmation_screen', '');
	}
	
	if(variable_get('teligence_cart_debug_mode', 0))
	{
		$output .= '<div class="warning">';
		$output .= '$_REQUEST: <pre>'.print_r($_REQUEST, true).'</pre>';
		$output .= 'teligence_cart_paypal_price_confirmation_screen: <pre>'.print_r(variable_get('teligence_cart_paypal_price_confirmation_screen', ''), true).'</pre>';
		$output .= 'teligence_cart_paypal_i18n_variable_get: <pre>'.print_r(teligence_cart_paypal_i18n_variable_get('teligence_cart_paypal_price_confirmation_screen', $_REQUEST['lang']), true).'</pre>';
		$output .= '</div>';
	}
	
	print $output;
}

/**
 * variable_get for multilingual variables
 */
function teligence_cart_paypal_i18n_variable_get($name, $langcode) 
{
  $result = db_query("SELECT * FROM {i18n_variable} WHERE name='%s' AND language = '%s'", $name, $langcode);
  
  $variable = ($v = db_fetch_object($result)) ? unserialize($v->value) : NULL;

  return $variable;
}


/*********************
 ** THEME FUNCTIONS **
 *********************/

/*
 * account info for paypal form theme function
 */
function theme_teligence_cart_paypal_steps($form)
{
	drupal_add_js(array('teligence_cart_short_password' => "Password length too short"), 'setting');
	return drupal_render($form);
}